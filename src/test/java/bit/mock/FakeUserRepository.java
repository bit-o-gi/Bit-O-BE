package bit.mock;

import bit.user.domain.User;
import bit.user.repository.UserRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedID = new AtomicLong(0);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedID.incrementAndGet())
                    .email(user.getEmail())
                    .nickName(user.getNickName())
                    .platform(user.getPlatform())
                    .build();
            data.add(newUser);
            return newUser;
        }
        data.removeIf(u -> u.getId().equals(user.getId()));
        data.add(user);
        return user;
    }

    public Optional<User> findById(long id) {
        return data.stream().filter(u -> u.getId().equals(id)).findFirst();
    }

    public Optional<User> findByEmail(String email) {
        return data.stream().filter(u -> u.getEmail().equals(email)).findFirst();
    }
}
